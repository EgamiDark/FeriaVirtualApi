--EJECUTAR ESTE CODIGO CON EL USUARIO SYS
ALTER SESSION SET "_ORACLE_SCRIPT"=TRUE;
DROP USER FeriaVirtual CASCADE ;

CREATE USER FeriaVirtual IDENTIFIED BY FeriaVirtual;
GRANT DBA TO FeriaVirtual;



--EJECUTAR ESTE CODIGO CON EL USUARIO FeriaVirtual
--ELIMINAR TABLAS
DROP TABLE CONTRATO CASCADE CONSTRAINTS;
DROP TABLE ESTOFERP CASCADE CONSTRAINTS;
DROP TABLE ESTOFERTRANS CASCADE CONSTRAINTS;
DROP TABLE ESTPAGO CASCADE CONSTRAINTS;
DROP TABLE ESTPEDIDO CASCADE CONSTRAINTS;
DROP TABLE ESTSUBASTA CASCADE CONSTRAINTS;
DROP TABLE ESTVENTA CASCADE CONSTRAINTS;
DROP TABLE TIPOVENTA CASCADE CONSTRAINTS;
DROP TABLE OFERTAPROD CASCADE CONSTRAINTS;
DROP TABLE OFERTATRANS CASCADE CONSTRAINTS;
DROP TABLE PAGO CASCADE CONSTRAINTS;
DROP TABLE PEDIDO CASCADE CONSTRAINTS;
DROP TABLE PRODUCTO CASCADE CONSTRAINTS;
DROP TABLE ROL CASCADE CONSTRAINTS;
DROP TABLE SUBASTATRANS CASCADE CONSTRAINTS;
DROP TABLE TIPOREFRIG CASCADE CONSTRAINTS;
DROP TABLE TIPOTRANS CASCADE CONSTRAINTS;
DROP TABLE TRANSPORTE CASCADE CONSTRAINTS;
DROP TABLE USUARIO CASCADE CONSTRAINTS;
DROP TABLE VENTALOCAL CASCADE CONSTRAINTS;

--CREAR TABLAS
CREATE TABLE contrato (
    idcontrato    INTEGER NOT NULL,
    fechacreacion DATE NOT NULL,
    fechatermino  DATE NOT NULL,
    idusuario     INTEGER NOT NULL
);

ALTER TABLE contrato ADD CONSTRAINT contrato_pk PRIMARY KEY ( idcontrato );

CREATE TABLE estoferp (
    idestoferp  INTEGER NOT NULL,
    descripcion VARCHAR2(150) NOT NULL
);

ALTER TABLE estoferp ADD CONSTRAINT estoferp_pk PRIMARY KEY ( idestoferp );

CREATE TABLE estofertrans (
    idestofertrans INTEGER NOT NULL,
    descripcion    VARCHAR2(150) NOT NULL
);

ALTER TABLE estofertrans ADD CONSTRAINT estofertrans_pk PRIMARY KEY ( idestofertrans );

CREATE TABLE estpago (
    idestpago   INTEGER NOT NULL,
    descripcion VARCHAR2(150) NOT NULL
);

ALTER TABLE estpago ADD CONSTRAINT estpago_pk PRIMARY KEY ( idestpago );

CREATE TABLE estpedido (
    idestpedido INTEGER NOT NULL,
    descripcion VARCHAR2(150) NOT NULL
);

ALTER TABLE estpedido ADD CONSTRAINT estpedido_pk PRIMARY KEY ( idestpedido );

CREATE TABLE estsubasta (
    idestsubasta INTEGER NOT NULL,
    descripcion  VARCHAR2(150) NOT NULL
);

ALTER TABLE estsubasta ADD CONSTRAINT estsubasta_pk PRIMARY KEY ( idestsubasta );

CREATE TABLE estventa (
    idestventa  INTEGER NOT NULL,
    descripcion VARCHAR2(150) NOT NULL
);

ALTER TABLE estventa ADD CONSTRAINT estventa_pk PRIMARY KEY ( idestventa );

CREATE TABLE ofertaprod (
    idofertaprod   INTEGER NOT NULL,
    preciounidad   INTEGER NOT NULL,
    kgunidad       INTEGER NOT NULL,
    cantidadoferta INTEGER NOT NULL,
    fechacosecha   DATE NOT NULL,
    fechacaducidad DATE NOT NULL,
    idpedido       INTEGER NOT NULL,
    idestoferp     INTEGER NOT NULL,
    idusuario      INTEGER NOT NULL
);

ALTER TABLE ofertaprod ADD CONSTRAINT ofertaprod_pk PRIMARY KEY ( idofertaprod );

CREATE TABLE ofertatrans (
    idofertatrans      INTEGER NOT NULL,
    preciooferta       INTEGER NOT NULL,
    cantidadtransporte INTEGER NOT NULL,
    fechaentrega       DATE NOT NULL,
    idsubastatrans     INTEGER NOT NULL,
    idestofertrans     INTEGER NOT NULL,
    patente            VARCHAR2(150) NOT NULL
);

ALTER TABLE ofertatrans ADD CONSTRAINT ofertatrans_pk PRIMARY KEY ( idofertatrans );

CREATE TABLE pago (
    idpago       INTEGER NOT NULL,
    montototal   INTEGER NOT NULL,
    fechapago    DATE NOT NULL,
    idestpago    INTEGER NOT NULL,
    idpedido     INTEGER,
    idventalocal INTEGER,
    idtipoventa  INTEGER NOT NULL
);

ALTER TABLE pago ADD CONSTRAINT pago_pk PRIMARY KEY ( idpago );

CREATE TABLE pedido (
    idpedido           INTEGER NOT NULL,
    fechasolicitud     DATE NOT NULL,
    fechatermino       DATE NOT NULL,
    cantidadsolicitada INTEGER NOT NULL,
    kgunidad           INTEGER NOT NULL,
    preciomaximo       INTEGER NOT NULL,
    idestpedido        INTEGER NOT NULL,
    idusuario          INTEGER NOT NULL,
    idproducto         INTEGER NOT NULL
);

ALTER TABLE pedido ADD CONSTRAINT pedido_pk PRIMARY KEY ( idpedido );

CREATE TABLE producto (
    idproducto INTEGER NOT NULL,
    nombre     VARCHAR2(150) NOT NULL,
    isactive   CHAR(1) NOT NULL,
    imagen     BLOB
);

ALTER TABLE producto ADD CONSTRAINT producto_pk PRIMARY KEY ( idproducto );

CREATE TABLE rol (
    idrol       INTEGER NOT NULL,
    descripcion VARCHAR2(150 CHAR) NOT NULL
);

ALTER TABLE rol ADD CONSTRAINT rol_pk PRIMARY KEY ( idrol );

CREATE TABLE subastatrans (
    idsubastatrans  INTEGER NOT NULL,
    fechasubasta    DATE NOT NULL,
    fechatermino    DATE NOT NULL,
    idpedido INTEGER,
    idventalocal    INTEGER,
    idtiporefrig    INTEGER NOT NULL,
    idtipotrans     INTEGER NOT NULL,
    idestsubasta    INTEGER NOT NULL,
    idtipoventa     INTEGER NOT NULL
);

ALTER TABLE subastatrans ADD CONSTRAINT subastatrans_pk PRIMARY KEY ( idsubastatrans );

CREATE TABLE tiporefrig (
    idtiporefrig INTEGER NOT NULL,
    descripcion  VARCHAR2(150) NOT NULL
);

ALTER TABLE tiporefrig ADD CONSTRAINT tiporefrig_pk PRIMARY KEY ( idtiporefrig );

CREATE TABLE tipotrans (
    idtipotrans INTEGER NOT NULL,
    descripcion VARCHAR2(150 CHAR) NOT NULL
);

ALTER TABLE tipotrans ADD CONSTRAINT tipotrans_pk PRIMARY KEY ( idtipotrans );

CREATE TABLE tipoventa (
    idtipoventa INTEGER NOT NULL,
    descripcion VARCHAR2(150) NOT NULL
);

ALTER TABLE tipoventa ADD CONSTRAINT tipoventa_pk PRIMARY KEY ( idtipoventa );

CREATE TABLE transporte (
    patente        VARCHAR2(150) NOT NULL,
    tamanio        VARCHAR2(150) NOT NULL,
    capacidadcarga INTEGER NOT NULL,
    actividad      CHAR(1) NOT NULL,
    idtiporefrig   INTEGER NOT NULL,
    idtipotrans    INTEGER NOT NULL,
    idusuario      INTEGER NOT NULL
);

ALTER TABLE transporte ADD CONSTRAINT transporte_pk PRIMARY KEY ( patente );

CREATE TABLE usuario (
    idusuario   INTEGER NOT NULL,
    rut         VARCHAR2(50 CHAR) NOT NULL,
    nombre      VARCHAR2(255) NOT NULL,
    apellidos   VARCHAR2(255) NOT NULL,
    email       VARCHAR2(255) NOT NULL,
    contrasenia VARCHAR2(255) NOT NULL,
    actividad   CHAR(1) NOT NULL,
    direccion   VARCHAR2(255 CHAR) NOT NULL,
    telefono    VARCHAR2(150 CHAR) NOT NULL,
    idrol       INTEGER NOT NULL
);

ALTER TABLE usuario ADD CONSTRAINT usuario_pk PRIMARY KEY ( idusuario );

CREATE TABLE ventalocal (
    idventalocal INTEGER NOT NULL,
    montototal   INTEGER NOT NULL,
    idofertaprod INTEGER NOT NULL,
    idusuario    INTEGER NOT NULL,
    idestventa   INTEGER NOT NULL
);

ALTER TABLE ventalocal ADD CONSTRAINT ventalocal_pk PRIMARY KEY ( idventalocal );

ALTER TABLE contrato
    ADD CONSTRAINT contrato_usuario_fk FOREIGN KEY ( idusuario )
        REFERENCES usuario ( idusuario );

ALTER TABLE ofertaprod
    ADD CONSTRAINT ofertaprod_estoferp_fk FOREIGN KEY ( idestoferp )
        REFERENCES estoferp ( idestoferp );

ALTER TABLE ofertaprod
    ADD CONSTRAINT ofertaprod_pedido_fk FOREIGN KEY ( idpedido )
        REFERENCES pedido ( idpedido );

ALTER TABLE ofertaprod
    ADD CONSTRAINT ofertaprod_usuario_fk FOREIGN KEY ( idusuario )
        REFERENCES usuario ( idusuario );

ALTER TABLE ofertatrans
    ADD CONSTRAINT ofertatrans_estofertrans_fk FOREIGN KEY ( idestofertrans )
        REFERENCES estofertrans ( idestofertrans );

ALTER TABLE ofertatrans
    ADD CONSTRAINT ofertatrans_subastatrans_fk FOREIGN KEY ( idsubastatrans )
        REFERENCES subastatrans ( idsubastatrans );

ALTER TABLE ofertatrans
    ADD CONSTRAINT ofertatrans_transporte_fk FOREIGN KEY ( patente )
        REFERENCES transporte ( patente );

ALTER TABLE pago
    ADD CONSTRAINT pago_estpago_fk FOREIGN KEY ( idestpago )
        REFERENCES estpago ( idestpago );

ALTER TABLE pago
    ADD CONSTRAINT pago_pedido_fk FOREIGN KEY ( idpedido )
        REFERENCES pedido ( idpedido );

ALTER TABLE pago
    ADD CONSTRAINT pago_tipoventa_fk FOREIGN KEY ( idtipoventa )
        REFERENCES tipoventa ( idtipoventa );

ALTER TABLE pago
    ADD CONSTRAINT pago_ventalocal_fk FOREIGN KEY ( idventalocal )
        REFERENCES ventalocal ( idventalocal );

ALTER TABLE pedido
    ADD CONSTRAINT pedido_estpedido_fk FOREIGN KEY ( idestpedido )
        REFERENCES estpedido ( idestpedido );

ALTER TABLE pedido
    ADD CONSTRAINT pedido_producto_fk FOREIGN KEY ( idproducto )
        REFERENCES producto ( idproducto );

ALTER TABLE pedido
    ADD CONSTRAINT pedido_usuario_fk FOREIGN KEY ( idusuario )
        REFERENCES usuario ( idusuario );

ALTER TABLE subastatrans
    ADD CONSTRAINT subastatrans_estsubasta_fk FOREIGN KEY ( idestsubasta )
        REFERENCES estsubasta ( idestsubasta );

ALTER TABLE subastatrans
    ADD CONSTRAINT subastatrans_pedido_fk FOREIGN KEY ( idpedido )
        REFERENCES pedido ( idpedido );

ALTER TABLE subastatrans
    ADD CONSTRAINT subastatrans_tiporefrig_fk FOREIGN KEY ( idtiporefrig )
        REFERENCES tiporefrig ( idtiporefrig );

ALTER TABLE subastatrans
    ADD CONSTRAINT subastatrans_tipotrans_fk FOREIGN KEY ( idtipotrans )
        REFERENCES tipotrans ( idtipotrans );

ALTER TABLE subastatrans
    ADD CONSTRAINT subastatrans_tipoventa_fk FOREIGN KEY ( idtipoventa )
        REFERENCES tipoventa ( idtipoventa );

ALTER TABLE subastatrans
    ADD CONSTRAINT subastatrans_ventalocal_fk FOREIGN KEY ( idventalocal )
        REFERENCES ventalocal ( idventalocal );

ALTER TABLE transporte
    ADD CONSTRAINT transporte_tiporefrig_fk FOREIGN KEY ( idtiporefrig )
        REFERENCES tiporefrig ( idtiporefrig );

ALTER TABLE transporte
    ADD CONSTRAINT transporte_tipotrans_fk FOREIGN KEY ( idtipotrans )
        REFERENCES tipotrans ( idtipotrans );

ALTER TABLE transporte
    ADD CONSTRAINT transporte_usuario_fk FOREIGN KEY ( idusuario )
        REFERENCES usuario ( idusuario );

ALTER TABLE usuario
    ADD CONSTRAINT usuario_rol_fk FOREIGN KEY ( idrol )
        REFERENCES rol ( idrol );

ALTER TABLE ventalocal
    ADD CONSTRAINT ventalocal_estventa_fk FOREIGN KEY ( idestventa )
        REFERENCES estventa ( idestventa );

ALTER TABLE ventalocal
    ADD CONSTRAINT ventalocal_ofertaprod_fk FOREIGN KEY ( idofertaprod )
        REFERENCES ofertaprod ( idofertaprod );

ALTER TABLE ventalocal
    ADD CONSTRAINT ventalocal_usuario_fk FOREIGN KEY ( idusuario )
        REFERENCES usuario ( idusuario );

-- ALTERAMOS COLUMNA IMAGEN PARA PODER REALIZAR INSERCIONES
ALTER TABLE PRODUCTO DROP COLUMN IMAGEN;
ALTER TABLE PRODUCTO ADD IMAGEN BLOB DEFAULT EMPTY_BLOB();

--ELIMINAR Y CREAR SECUENCIAS

DROP SEQUENCE SEQ_ID_USUARIO;
DROP SEQUENCE SEQ_ID_PRODUCTO;
DROP SEQUENCE SEQ_ID_PEDIDO;
DROP SEQUENCE SEQ_ID_OFERTA_S;
CREATE SEQUENCE SEQ_ID_USUARIO;
CREATE SEQUENCE SEQ_ID_PRODUCTO;
CREATE SEQUENCE SEQ_ID_PEDIDO;
CREATE SEQUENCE SEQ_ID_OFERTA_S;

--INSERTAR DATOS

INSERT INTO ROL (idrol,descripcion) VALUES(1,'ADMINISTRADOR');
INSERT INTO ROL (idrol,descripcion) VALUES(2,'TRANSPORTISTA');
INSERT INTO ROL (idrol,descripcion) VALUES(3,'PRODUCTOR');
INSERT INTO ROL (idrol,descripcion) VALUES(4,'CLIENTE_EXTERNO');
INSERT INTO ROL (idrol,descripcion) VALUES(5,'CLIENTE_LOCAL');
INSERT INTO ROL (idrol,descripcion) VALUES(6,'CONSULTOR');

INSERT INTO USUARIO VALUES(SEQ_ID_USUARIO.NEXTVAL,'19956167-7','MATIAS','SAN MARTIN SALINAS','ma.sanmartins@duocuc.cl','123456',1,'Las araucarias 0287','+56958219103',1);

INSERT INTO TIPOTRANS VALUES(1,'AUTOMOVÍL');
INSERT INTO TIPOTRANS VALUES(2,'BARCO');
INSERT INTO TIPOTRANS VALUES(3,'AVIÓN');

INSERT INTO TIPOREFRIG VALUES(1,'FRIGORIFICO');
INSERT INTO TIPOREFRIG VALUES(2,'NO APLICA');

INSERT INTO TRANSPORTE VALUES('QE-RW-22','2000X2000',2000,1,1,1,1);
INSERT INTO TRANSPORTE VALUES('Q3-RE-32','2000X2000',2000,1,1,1,1);

INSERT INTO ESTOFERTRANS VALUES(1,'INGRESADA');
INSERT INTO ESTOFERTRANS VALUES(2,'CANCELADA');
INSERT INTO ESTOFERTRANS VALUES(3,'ACEPTADA');
INSERT INTO ESTOFERTRANS VALUES(4,'RECHAZADA');

INSERT INTO ESTSUBASTA VALUES(1,'EN PROCESO');
INSERT INTO ESTSUBASTA VALUES(2,'TERMINADA');
INSERT INTO ESTSUBASTA VALUES(3,'CANCELADA');

INSERT INTO TIPOVENTA VALUES(1,'EXTERNA');
INSERT INTO TIPOVENTA VALUES(2,'LOCAL');

--DATOS DE PRUEBA INICIO
INSERT INTO ESTPEDIDO VALUES(1,'EN PROCESO');

INSERT INTO PRODUCTO (idproducto, nombre,isactive)VALUES(1,'PALTA',1);
INSERT INTO PEDIDO VALUES(1,'25-10-2021','25-10-2021',2000,10,20000,1,1,1);
INSERT INTO SUBASTATRANS(idsubastatrans,fechasubasta,fechatermino,idpedido,idtiporefrig,idtipotrans,idestsubasta,idtipoventa) VALUES(1,'28-10-2021','30-10-2021',1,1,1,1,1)

--DATOS DE PRUEBA FIN
/

--CREAR PACKAGE
create or replace PACKAGE PKG_METODOS AS 


PROCEDURE LOGIN(CURSOR_T OUT SYS_REFCURSOR, V_EMAIL IN VARCHAR2, V_CONTRASENIA IN VARCHAR2);
PROCEDURE VALIDAR_EMAIL(CURSOR_T OUT SYS_REFCURSOR, V_EMAIL IN VARCHAR2);
PROCEDURE OBTENER_ROLES(CURSOR_T OUT SYS_REFCURSOR);

PROCEDURE INSERTAR_USUARIO(V_RUT IN VARCHAR2, V_NOMBRE IN VARCHAR2,V_APELLIDOS IN VARCHAR2,V_EMAIL IN VARCHAR2,V_CONTRASENIA IN VARCHAR2,V_DIRECCION IN VARCHAR2,V_TELEFONO IN VARCHAR2,V_ID_ROL IN NUMBER);
PROCEDURE OBTENER_USUARIO(CURSOR_T OUT SYS_REFCURSOR, V_ID IN NUMBER);
PROCEDURE OBTENER_USUARIOS(CURSOR_T OUT SYS_REFCURSOR);
PROCEDURE MODIFICAR_USUARIO(V_ID_USUARIO IN NUMBER,V_ACTIVIDAD IN NUMBER,V_RUT IN VARCHAR2, V_NOMBRE IN VARCHAR2,V_APELLIDOS IN VARCHAR2,V_EMAIL IN VARCHAR2,V_CONTRASENIA IN VARCHAR2,V_DIRECCION IN VARCHAR2,V_TELEFONO IN VARCHAR2,V_ID_ROL IN NUMBER);


PROCEDURE INSERTAR_PRODUCTO(V_NOMBRE IN VARCHAR2,V_ISACTIVE IN CHAR, V_IMAGEN IN BLOB);
PROCEDURE OBTENER_PRODUCTOS(CURSOR_T OUT SYS_REFCURSOR);
PROCEDURE MODIFICAR_PRODUCTO(V_ID_PRODUCTO IN NUMBER, V_NOMBRE IN VARCHAR2, V_ISACTIVE IN CHAR, V_IMAGEN IN BLOB);

PROCEDURE INSERTAR_TRANSPORTE(V_PATENTE IN VARCHAR2, V_TAMANIO IN VARCHAR2, V_CAPACIDAD IN NUMBER, V_ACTIVIDAD IN CHAR, V_ID_TIPO_REFRIG IN NUMBER, V_ID_TIPO_TRANS IN NUMBER, V_ID_USUARIO IN NUMBER);
PROCEDURE OBTENER_TRANSPORTES(CURSOR_T OUT SYS_REFCURSOR);
PROCEDURE OBTENER_TRANSPORTE(CURSOR_T OUT SYS_REFCURSOR, V_PATENTE IN VARCHAR2);
PROCEDURE OBTENER_TRANSPORTES_USUARIO(CURSOR_T OUT SYS_REFCURSOR, V_ID_USUARIO IN NUMBER);
PROCEDURE MODIFICAR_TRANSPORTE(V_PATENTE IN VARCHAR2, V_TAMANIO IN VARCHAR2, V_CAPACIDAD IN NUMBER, V_ACTIVIDAD IN CHAR, V_ID_TIPO_REFRIG IN NUMBER, V_ID_TIPO_TRANS IN NUMBER, V_ID_USUARIO IN NUMBER);
PROCEDURE ACTIVAR_DESCATIVAR_TRANSPORTE(V_PATENTE IN VARCHAR2, V_ACTIVIDAD IN CHAR);

PROCEDURE INSERTAR_PEDIDO(V_FECHA_SOLICITUD IN DATE, V_FECHAR_TERMINO IN DATE, V_CANTIDAD_SOLICITADA IN NUMBER, V_KG_UNIDAD IN NUMBER, V_PRECIO_MAXIMO IN NUMBER, V_ID_ESTADO_PEDIDO IN NUMBER, V_ID_USUARIO IN NUMBER, V_ID_PRODUCTO IN NUMBER);
PROCEDURE OBTENER_PEDIDOS(CURSOR_T OUT SYS_REFCURSOR);
PROCEDURE OBTENER_PEDIDOS_D(CURSOR_T OUT SYS_REFCURSOR);
PROCEDURE OBTENER_PEDIDO(CURSOR_T OUT SYS_REFCURSOR, V_ID_PEDIDO IN NUMBER);
PROCEDURE OBTENER_PEDIDOS_USUARIO(CURSOR_T OUT SYS_REFCURSOR, V_ID_USUARIO IN NUMBER);
PROCEDURE MODIFICAR_PEDIDO(V_ID_PEDIDO IN NUMBER, V_FECHA_SOLICITUD IN DATE, V_FECHAR_TERMINO IN DATE, V_CANTIDAD_SOLICITADA IN NUMBER, V_KG_UNIDAD IN NUMBER, V_PRECIO_MAXIMO IN NUMBER, V_ID_ESTADO_PEDIDO IN NUMBER, V_ID_USUARIO IN NUMBER, V_ID_PRODUCTO IN NUMBER);

PROCEDURE OBTENER_PAGOS_PEDIDO(CURSOR_T OUT SYS_REFCURSOR, V_ID_USUARIO IN NUMBER);
PROCEDURE OBTENER_PAGOS_VENTA_LOCAL(CURSOR_T OUT SYS_REFCURSOR, V_ID_USUARIO IN NUMBER);

PROCEDURE OBTENER_CONTRATOS_USUARIO(CURSOR_T OUT SYS_REFCURSOR, V_ID_USUARIO IN NUMBER);

PROCEDURE OBTENER_SUBASTAS(CURSOR_T OUT SYS_REFCURSOR);
PROCEDURE OBTENER_SUBASTAS_D(CURSOR_T OUT SYS_REFCURSOR);
PROCEDURE OBTENER_OFERTAS_S(CURSOR_T OUT SYS_REFCURSOR,V_ID IN NUMBER);
PROCEDURE INSERTAR_OFERTA_S(V_PRECIO_OFERTA IN NUMBER,V_CANTIDAD_TRANSPORTE IN NUMBER,V_FECHA_ENTREGA IN DATE,V_ID_SUBASTA IN NUMBER,V_PATENTE IN VARCHAR2);
PROCEDURE MODIFICAR_OFERTA_S(V_PRECIO_OFERTA IN NUMBER,V_CANTIDAD_TRANSPORTE IN NUMBER,V_FECHA_ENTREGA IN DATE,V_PATENTE IN VARCHAR2,V_ID_OFERTA IN NUMBER);
PROCEDURE CANCELAR_OFERTA_S(V_ID_OFERTA IN NUMBER);

PROCEDURE OBTENER_TIPO_REFRIGERACION(CURSOR_T OUT SYS_REFCURSOR);
PROCEDURE OBTENER_TIPO_TRANSPORTE(CURSOR_T OUT SYS_REFCURSOR);
PROCEDURE OBTENER_EST_PEDIDO(CURSOR_T OUT SYS_REFCURSOR);
PROCEDURE OBTENER_EST_SUBASTA(CURSOR_T OUT SYS_REFCURSOR);
PROCEDURE OBTENER_EST_OFERTA(CURSOR_T OUT SYS_REFCURSOR);

END PKG_METODOS;

/
--CREAR BODY DEL PACKAGE
create or replace PACKAGE BODY PKG_METODOS AS

--OBTENER USUARIO
PROCEDURE OBTENER_USUARIO(CURSOR_T OUT SYS_REFCURSOR, V_ID IN NUMBER)
AS
BEGIN
    OPEN CURSOR_T FOR SELECT * FROM USUARIO WHERE IDUSUARIO=V_ID;
END OBTENER_USUARIO;

--OBTENER USUARIOS
PROCEDURE OBTENER_USUARIOS(CURSOR_T OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN CURSOR_T FOR SELECT * FROM USUARIO;
END OBTENER_USUARIOS;

--VALIDAR EMAIL
PROCEDURE VALIDAR_EMAIL(CURSOR_T OUT SYS_REFCURSOR, V_EMAIL IN VARCHAR2)
AS
BEGIN
    OPEN CURSOR_T FOR SELECT * FROM USUARIO WHERE EMAIL=V_EMAIL;
END VALIDAR_EMAIL;

--LOGIN
PROCEDURE LOGIN(CURSOR_T OUT SYS_REFCURSOR, V_EMAIL IN VARCHAR2, V_CONTRASENIA IN VARCHAR2)
AS
BEGIN
    OPEN CURSOR_T FOR SELECT * FROM USUARIO WHERE EMAIL=V_EMAIL AND CONTRASENIA=V_CONTRASENIA;
END LOGIN;

--MODIFICAR USUARIO
PROCEDURE MODIFICAR_USUARIO(V_ID_USUARIO IN NUMBER,V_ACTIVIDAD IN NUMBER,V_RUT IN VARCHAR2, V_NOMBRE IN VARCHAR2,V_APELLIDOS IN VARCHAR2,V_EMAIL IN VARCHAR2,V_CONTRASENIA IN VARCHAR2,V_DIRECCION IN VARCHAR2,V_TELEFONO IN VARCHAR2,V_ID_ROL IN NUMBER)
AS
BEGIN
UPDATE USUARIO
SET rut=V_RUT,
nombre=V_NOMBRE,
apellidos=V_APELLIDOS,
email=V_EMAIL,
contrasenia=V_CONTRASENIA,
actividad=V_ACTIVIDAD,
direccion=V_DIRECCION,
telefono=V_TELEFONO,
idrol=V_ID_ROL
WHERE idUsuario=V_ID_USUARIO;
END MODIFICAR_USUARIO;
--REGISTRAR USUARIO
PROCEDURE INSERTAR_USUARIO(V_RUT IN VARCHAR2, V_NOMBRE IN VARCHAR2,V_APELLIDOS IN VARCHAR2,V_EMAIL IN VARCHAR2,V_CONTRASENIA IN VARCHAR2,V_DIRECCION IN VARCHAR2,V_TELEFONO IN VARCHAR2,V_ID_ROL IN NUMBER)
AS
BEGIN
INSERT INTO USUARIO VALUES(SEQ_ID_USUARIO.NEXTVAL,V_RUT,V_NOMBRE,V_APELLIDOS,V_EMAIL,V_CONTRASENIA,1,V_DIRECCION,V_TELEFONO,V_ID_ROL);
END INSERTAR_USUARIO;

--OBTENER ROLES
PROCEDURE OBTENER_ROLES(CURSOR_T OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN CURSOR_T FOR SELECT * FROM ROL;
END OBTENER_ROLES;

--INSERTAR PRODUCTO
PROCEDURE INSERTAR_PRODUCTO(V_NOMBRE IN VARCHAR2,V_ISACTIVE IN CHAR,V_IMAGEN IN BLOB)
AS
BEGIN
INSERT INTO PRODUCTO VALUES(SEQ_ID_PRODUCTO.NEXTVAL, V_NOMBRE,V_ISACTIVE, V_IMAGEN);
END;

--OBTENER PRODUCTOS
PROCEDURE OBTENER_PRODUCTOS(CURSOR_T OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN CURSOR_T FOR SELECT * FROM PRODUCTO;
    RETURN;
END;

--MODIFICAR PRODUCTO
PROCEDURE MODIFICAR_PRODUCTO(V_ID_PRODUCTO IN NUMBER, V_NOMBRE IN VARCHAR2, V_ISACTIVE IN CHAR, V_IMAGEN IN BLOB)
AS
BEGIN
    UPDATE PRODUCTO
    SET nombre=V_NOMBRE,
    isactive=V_ISACTIVE,
    imagen=V_IMAGEN
    WHERE idproducto=V_ID_PRODUCTO;
END MODIFICAR_PRODUCTO;

--INSERTAR TRANSPORTE
PROCEDURE INSERTAR_TRANSPORTE(V_PATENTE IN VARCHAR2, V_TAMANIO IN VARCHAR2, V_CAPACIDAD IN NUMBER, V_ACTIVIDAD IN CHAR, V_ID_TIPO_REFRIG IN NUMBER, V_ID_TIPO_TRANS IN NUMBER, V_ID_USUARIO IN NUMBER)
AS
BEGIN
    INSERT INTO TRANSPORTE VALUES(V_PATENTE, V_TAMANIO, V_CAPACIDAD, V_ACTIVIDAD, V_ID_TIPO_REFRIG, V_ID_TIPO_TRANS, V_ID_USUARIO);
END INSERTAR_TRANSPORTE;
    
--OBTENER TRANSPORTES
PROCEDURE OBTENER_TRANSPORTES(CURSOR_T OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN CURSOR_T FOR SELECT * FROM TRANSPORTE;
    RETURN;
END OBTENER_TRANSPORTES;
    
--MODIFICAR TRANSPORTE
PROCEDURE MODIFICAR_TRANSPORTE(V_PATENTE IN VARCHAR2, V_TAMANIO IN VARCHAR2, V_CAPACIDAD IN NUMBER, V_ACTIVIDAD IN CHAR, V_ID_TIPO_REFRIG IN NUMBER, V_ID_TIPO_TRANS IN NUMBER, V_ID_USUARIO IN NUMBER)
AS
BEGIN
    UPDATE TRANSPORTE
    SET tamanio = V_TAMANIO,
        capacidadcarga = V_CAPACIDAD,
        actividad = V_ACTIVIDAD,
        idtiporefrig = V_ID_TIPO_REFRIG,
        idtipotrans = V_ID_TIPO_TRANS,
        idusuario = V_ID_USUARIO
    WHERE patente = V_PATENTE;
END MODIFICAR_TRANSPORTE; 

--ACTIVAR/DESCATIVAR TRANSPORTE
PROCEDURE ACTIVAR_DESCATIVAR_TRANSPORTE(V_PATENTE IN VARCHAR2, V_ACTIVIDAD IN CHAR)
AS
BEGIN
    UPDATE TRANSPORTE SET actividad = V_ACTIVIDAD WHERE patente = V_PATENTE;
END ACTIVAR_DESCATIVAR_TRANSPORTE;

--OBTENER TRANSPORTE
PROCEDURE OBTENER_TRANSPORTE(CURSOR_T OUT SYS_REFCURSOR, V_PATENTE IN VARCHAR2)
AS
BEGIN
    OPEN CURSOR_T FOR SELECT * FROM TRANSPORTE WHERE patente = V_PATENTE ;
END OBTENER_TRANSPORTE;

--OBTENER TRANSPORTES POR USUARIOS
PROCEDURE OBTENER_TRANSPORTES_USUARIO(CURSOR_T OUT SYS_REFCURSOR, V_ID_USUARIO IN NUMBER)
AS
BEGIN
    OPEN CURSOR_T FOR SELECT * FROM TRANSPORTE WHERE IDUSUARIO = V_ID_USUARIO;
END OBTENER_TRANSPORTES_USUARIO;

-- INSERTAR PEDIDO 
PROCEDURE INSERTAR_PEDIDO(
    V_FECHA_SOLICITUD IN DATE, 
    V_FECHAR_TERMINO IN DATE, 
    V_CANTIDAD_SOLICITADA IN NUMBER, 
    V_KG_UNIDAD IN NUMBER, 
    V_PRECIO_MAXIMO IN NUMBER, 
    V_ID_ESTADO_PEDIDO IN NUMBER, 
    V_ID_USUARIO IN NUMBER, 
    V_ID_PRODUCTO IN NUMBER)
AS
BEGIN
    INSERT INTO PEDIDO VALUES(SEQ_ID_PEDIDO.NEXTVAL, 
        V_FECHA_SOLICITUD, 
        V_FECHAR_TERMINO, 
        V_CANTIDAD_SOLICITADA, 
        V_KG_UNIDAD, 
        V_PRECIO_MAXIMO, 
        V_ID_ESTADO_PEDIDO, 
        V_ID_USUARIO, 
        V_ID_PRODUCTO);
END INSERTAR_PEDIDO;

-- OBTENER TODOS LOS PEDIDOS
PROCEDURE OBTENER_PEDIDOS(CURSOR_T OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN CURSOR_T FOR SELECT * FROM PEDIDO;
END OBTENER_PEDIDOS;

-- OBTENER TODOS LOS PEDIDOS DISPONIBLES
PROCEDURE OBTENER_PEDIDOS_D(CURSOR_T OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN CURSOR_T FOR SELECT * FROM PEDIDO WHERE IDESTPEDIDO=1;
END OBTENER_PEDIDOS_D;

-- OBTENER SOLO UN PEDIDO
PROCEDURE OBTENER_PEDIDO(CURSOR_T OUT SYS_REFCURSOR, V_ID_PEDIDO IN NUMBER)
AS
BEGIN
    OPEN CURSOR_T FOR SELECT * FROM PEDIDO WHERE idpedido = V_ID_PEDIDO;
END OBTENER_PEDIDO;

-- OBTENER TODOS LOS PEDIDOS DE UN USUARIO
PROCEDURE OBTENER_PEDIDOS_USUARIO(CURSOR_T OUT SYS_REFCURSOR, V_ID_USUARIO IN NUMBER)
AS
BEGIN
    OPEN CURSOR_T FOR SELECT * FROM PEDIDO WHERE idusuario = V_ID_USUARIO;
END OBTENER_PEDIDOS_USUARIO;

-- MODIFICA UN PEDIDO EN ESPECIFICO
PROCEDURE MODIFICAR_PEDIDO(
    V_ID_PEDIDO IN NUMBER, 
    V_FECHA_SOLICITUD IN DATE, 
    V_FECHAR_TERMINO IN DATE, 
    V_CANTIDAD_SOLICITADA IN NUMBER, 
    V_KG_UNIDAD IN NUMBER, 
    V_PRECIO_MAXIMO IN NUMBER, 
    V_ID_ESTADO_PEDIDO IN NUMBER, 
    V_ID_USUARIO IN NUMBER, 
    V_ID_PRODUCTO IN NUMBER)
AS
BEGIN
    UPDATE PEDIDO
    SET fechasolicitud = V_FECHA_SOLICITUD,
        fechatermino = V_FECHAR_TERMINO,
        cantidadsolicitada = V_CANTIDAD_SOLICITADA,
        kgunidad = V_KG_UNIDAD,
        preciomaximo = V_PRECIO_MAXIMO,
        idestpedido = V_ID_ESTADO_PEDIDO,
        idusuario = V_ID_USUARIO,
        idproducto = V_ID_PRODUCTO
    WHERE idpedido = V_ID_PEDIDO;
END MODIFICAR_PEDIDO;

-- OBTIENE LOS PAGOS DE LOS PEDIDOS POR USUARIO
PROCEDURE OBTENER_PAGOS_PEDIDO(CURSOR_T OUT SYS_REFCURSOR, V_ID_USUARIO IN NUMBER)
AS
BEGIN
    OPEN CURSOR_T FOR SELECT * 
    FROM pago 
    WHERE idpedido 
    IN (SELECT pedido.idpedido FROM pedido WHERE pedido.idusuario = V_ID_USUARIO);
END OBTENER_PAGOS_PEDIDO;

-- OBTIENE LOS PAGOS DE LAS VENTAS LOCALES POR USUARIO
PROCEDURE OBTENER_PAGOS_VENTA_LOCAL(CURSOR_T OUT SYS_REFCURSOR, V_ID_USUARIO IN NUMBER)
AS
BEGIN
    OPEN CURSOR_T FOR SELECT * 
    FROM pago 
    WHERE idventalocal 
    IN (SELECT ventalocal.idventalocal FROM ventalocal WHERE ventalocal.idusuario = V_ID_USUARIO);
END OBTENER_PAGOS_VENTA_LOCAL;

-- OBTIENE TODOS LOS CONTRATOS DE UN USUARIO
PROCEDURE OBTENER_CONTRATOS_USUARIO(CURSOR_T OUT SYS_REFCURSOR, V_ID_USUARIO IN NUMBER)
AS
BEGIN
    OPEN CURSOR_T FOR SELECT * FROM contrato WHERE idusuario = V_ID_USUARIO;
END OBTENER_CONTRATOS_USUARIO;

--OBTENER SUBASTAS
PROCEDURE OBTENER_SUBASTAS(CURSOR_T OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN CURSOR_T FOR SELECT * FROM SUBASTATRANS;
    RETURN;
END;

--OBTENER SUBASTAS DISPONIBLES
PROCEDURE OBTENER_SUBASTAS_D(CURSOR_T OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN CURSOR_T FOR SELECT * FROM SUBASTATRANS WHERE IDESTSUBASTA=1;
    RETURN;
END;

--OBTENER OFERTAS DE UN USUARIO
PROCEDURE OBTENER_OFERTAS_S(CURSOR_T OUT SYS_REFCURSOR,V_ID IN NUMBER)
AS
BEGIN
    OPEN CURSOR_T FOR SELECT OT.IDSUBASTATRANS,OT.FECHAENTREGA,OT.PRECIOOFERTA,OT.CANTIDADTRANSPORTE,OT.PATENTE,OT.IDESTOFERTRANS,OT.IDOFERTATRANS FROM OFERTATRANS OT 
JOIN TRANSPORTE T ON T.PATENTE =OT.PATENTE
WHERE T.IDUSUARIO = V_ID;
    RETURN;
END;

--INSERTAR OFERTA DE SUBASTA
PROCEDURE INSERTAR_OFERTA_S(V_PRECIO_OFERTA IN NUMBER,V_CANTIDAD_TRANSPORTE IN NUMBER,V_FECHA_ENTREGA IN DATE,V_ID_SUBASTA IN NUMBER,V_PATENTE IN VARCHAR2)
AS
BEGIN
INSERT INTO OFERTATRANS VALUES(SEQ_ID_OFERTA_S.NEXTVAL, V_PRECIO_OFERTA,V_CANTIDAD_TRANSPORTE,V_FECHA_ENTREGA,V_ID_SUBASTA,1,V_PATENTE);
END;

--MODIFICAR OFERTA DE SUBASTA
PROCEDURE MODIFICAR_OFERTA_S(V_PRECIO_OFERTA IN NUMBER,V_CANTIDAD_TRANSPORTE IN NUMBER,V_FECHA_ENTREGA IN DATE,V_PATENTE IN VARCHAR2,V_ID_OFERTA IN NUMBER)
AS
BEGIN
UPDATE OFERTATRANS SET 
PRECIOOFERTA=V_PRECIO_OFERTA,
CANTIDADTRANSPORTE=V_CANTIDAD_TRANSPORTE,
FECHAENTREGA=V_FECHA_ENTREGA,
PATENTE=V_PATENTE
WHERE IDOFERTATRANS=V_ID_OFERTA;
END;

--CANCELAR OFERTA DE SUBASTA
PROCEDURE CANCELAR_OFERTA_S(V_ID_OFERTA IN NUMBER)
AS
BEGIN
UPDATE OFERTATRANS SET 
IDESTOFERTRANS=2
WHERE IDOFERTATRANS=V_ID_OFERTA;
END;

--OBTENER TIPOS DE REFRIGERACION
PROCEDURE OBTENER_TIPO_REFRIGERACION(CURSOR_T OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN CURSOR_T FOR SELECT * FROM TIPOREFRIG;
    RETURN;
END;

--OBTENER TIPOS DE TRANSPORTE
PROCEDURE OBTENER_TIPO_TRANSPORTE(CURSOR_T OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN CURSOR_T FOR SELECT * FROM TIPOTRANS;
    RETURN;
END;

--OBTENER ESTADO PEDIDO
PROCEDURE OBTENER_EST_PEDIDO(CURSOR_T OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN CURSOR_T FOR SELECT * FROM ESTPEDIDO;
    RETURN;
END;

--OBTENER ESTADO SUBASTA
PROCEDURE OBTENER_EST_SUBASTA(CURSOR_T OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN CURSOR_T FOR SELECT * FROM ESTSUBASTA;
    RETURN;
END;

--OBTENER ESTADO OFERTA
PROCEDURE OBTENER_EST_OFERTA(CURSOR_T OUT SYS_REFCURSOR)
AS
BEGIN
    OPEN CURSOR_T FOR SELECT * FROM ESTOFERTRANS;
    RETURN;
END;

END PKG_METODOS;

/
COMMIT;